import java.util.ArrayList;

/**
 * File Name:	U3A4_SortingRoutines
 * Programmer:	Pranay Kotian
 * Date:        August 18th, 2017
 * Description:	Demonstration of selection, bubble, insertion, and quick sort
 */

public class SortingEfficiencies extends javax.swing.JFrame {
    
    /**
     * Creates new form SortingRoutine
     */
    public SortingEfficiencies() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngAlgorithm = new javax.swing.ButtonGroup();
        btngOrder = new javax.swing.ButtonGroup();
        btngNum = new javax.swing.ButtonGroup();
        lblTitle = new javax.swing.JLabel();
        lblSub = new javax.swing.JLabel();
        lblSub1 = new javax.swing.JLabel();
        rbnSelect = new javax.swing.JRadioButton();
        rbnBubble = new javax.swing.JRadioButton();
        rbnInsertion = new javax.swing.JRadioButton();
        rbnQuick = new javax.swing.JRadioButton();
        lblSub2 = new javax.swing.JLabel();
        rbnAscending = new javax.swing.JRadioButton();
        rbnDescending = new javax.swing.JRadioButton();
        tfNum = new javax.swing.JTextField();
        btnSort = new javax.swing.JButton();
        lblOri = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaOri = new javax.swing.JTextArea();
        lblSort = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaSort = new javax.swing.JTextArea();
        lblAns = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txaOut = new javax.swing.JTextArea();
        rbn10 = new javax.swing.JRadioButton();
        rbn100 = new javax.swing.JRadioButton();
        rbn1000 = new javax.swing.JRadioButton();
        lblSub4 = new javax.swing.JLabel();
        rbn5000 = new javax.swing.JRadioButton();
        rbnCus = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("TI-Nspire Sans", 1, 24)); // NOI18N
        lblTitle.setText("Sorting Routines");

        lblSub.setText("Enter the following information: ");

        lblSub1.setText("Sorting Algorithm");

        rbnSelect.setSelected(true);
        rbnSelect.setText("Selection");

        rbnBubble.setSelected(true);
        rbnBubble.setText("Bubble");

        rbnInsertion.setSelected(true);
        rbnInsertion.setText("Insertion");

        rbnQuick.setSelected(true);
        rbnQuick.setText("Quick");

        lblSub2.setText("Sort Order");

        btngOrder.add(rbnAscending);
        rbnAscending.setSelected(true);
        rbnAscending.setText("Ascending");

        btngOrder.add(rbnDescending);
        rbnDescending.setText("Descending");

        btnSort.setText("Sort Numbers!");
        btnSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortActionPerformed(evt);
            }
        });

        lblOri.setText("Original Numbers:");

        txaOri.setColumns(20);
        txaOri.setRows(5);
        jScrollPane1.setViewportView(txaOri);

        lblSort.setText("Sorted Numbers:");

        txaSort.setColumns(20);
        txaSort.setRows(5);
        jScrollPane2.setViewportView(txaSort);

        lblAns.setText("Sort Results:");

        txaOut.setColumns(20);
        txaOut.setRows(5);
        jScrollPane3.setViewportView(txaOut);

        btngNum.add(rbn10);
        rbn10.setSelected(true);
        rbn10.setText("10");

        btngNum.add(rbn100);
        rbn100.setText("100");

        btngNum.add(rbn1000);
        rbn1000.setText("1000");

        lblSub4.setText("Amount of Numbers to Sort:");

        btngNum.add(rbn5000);
        rbn5000.setText("5000");

        btngNum.add(rbnCus);
        rbnCus.setText("Custom number:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSub2)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbnAscending)
                            .addComponent(rbnDescending)))
                    .addComponent(lblTitle)
                    .addComponent(lblSub)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblOri))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSort)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSub4)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbn10)
                            .addComponent(rbn1000))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbn5000)
                            .addComponent(rbn100)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbnCus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfNum, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSort)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAns)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSub1)
                    .addComponent(rbnInsertion)
                    .addComponent(rbnQuick)
                    .addComponent(rbnSelect)
                    .addComponent(rbnBubble))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblAns)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSub1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbnSelect)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbnBubble)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbnInsertion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbnQuick)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblSub)
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSub4)
                            .addComponent(rbn10)
                            .addComponent(rbn100))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbn1000)
                            .addComponent(rbn5000))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSub2)
                            .addComponent(rbnAscending))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbnDescending)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbnCus)
                            .addComponent(tfNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSort))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblOri)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSort)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 2, Short.MAX_VALUE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortActionPerformed
        
        int num;
        
        if (rbn10.isSelected())
            num = 10;
        else if (rbn100.isSelected())
            num = 100;
        else if (rbn1000.isSelected())
            num = 1000;
        else if (rbn5000.isSelected())
            num = 5000;
            //Sets the number of random numbers
        else //if (rbnCus.isSelected())
            num = Integer.parseInt(tfNum.getText());
            //Retrives number of values user wants in array
        
        ArrayList <Integer> temp = new ArrayList <Integer>();
        int tempnum;
        for (int i = 1; i <= num; i++) {
            if (((int)(Math.random()*2)) == 1)
                tempnum = (int)(Math.random()*1001);
            else
                tempnum = -(int)(Math.random()*1001);
            //There is a 50/50 chance the number sent will be negative or positive
            // so a random number between -1000 and 1000 is set
            
            temp.add(tempnum);
            //Number added to ArrayList
        }
        
        int numList [] = new int[temp.size()];
        for (int i = 0; i <temp.size(); i++) {
            numList[i] = temp.get(i);
        }
        int numList2 [] = new int[temp.size()];
        for (int i = 0; i <temp.size(); i++) {
            numList2[i] = temp.get(i);
        }
        int numList3 [] = new int[temp.size()];
        for (int i = 0; i <temp.size(); i++) {
            numList3[i] = temp.get(i);
        }
        int numList4 [] = new int[temp.size()];
        for (int i = 0; i <temp.size(); i++) {
            numList4[i] = temp.get(i);
        }
        //four different arrays are needed for each sorting algorithm because after one algorithm
        // is run on the array it is left sorted and the other algorithms dont have to do
        // any work
        
        String tempstringO = "";
        for (int i = 0; i < numList.length; i++) {
            tempstringO = tempstringO + numList[i] + "\n";
        }
        txaOri.setText(tempstringO);
        //Original numbers output to screen
        
        String error = "";
        //Error message
        
        int order;
        if (rbnDescending.isSelected())
            order = 0;
        else
            order = 1;
        //Order is ascending by default
        
        String output = "";
        //Variable that will be used to output statistics related to
        // all the sorting algorithms
        
        int sortList [];
        //SELECTION SORT
        if (rbnSelect.isSelected()){
            sortList = SelectionS(numList, order);
            
            String tempstringS = "";
            for (int i = 0; i <temp.size(); i++)
                tempstringS = tempstringS + sortList[i] + "\n";
            
            txaSort.setText(tempstringS);
            
            output = output + "Selection Sort\nNumber of times the loop was executed: " 
                        + ssLoop + "\nNumber of times a comparison was made: "
                        + ssCompare + "\nNumber of times a value was shifted: "
                        + ssShift + "\nNumber of milliseconds to complete sort: "
                        + ssTime + "\n\n";
        }
        
        //BUBBLE SORT
        if (rbnBubble.isSelected()){
            sortList = BubbleS(numList2, order);
            
            String tempstringS = "";
            for (int i = 0; i <temp.size(); i++)
                tempstringS = tempstringS + sortList[i] + "\n";
            
            txaSort.setText(tempstringS);
            
            output = output + "Bubble Sort\nNumber of times the loop was executed: " 
                        + bsLoop + "\nNumber of times a comparison was made: "
                        + bsCompare + "\nNumber of times a value was shifted: "
                        + bsShift + "\nNumber of milliseconds to complete sort: "
                        + bsTime + "\n\n";
        }
        
        //INSERTION SORT
        if (rbnInsertion.isSelected()){
            sortList = InsertionS(numList3, order);
            
            String tempstringS = "";
            for (int i = 0; i <temp.size(); i++)
                tempstringS = tempstringS + sortList[i] + "\n";
            
            txaSort.setText(tempstringS);
            
            output = output + "Insertion Sort\nNumber of times the loop was executed: " 
                        + isLoop + "\nNumber of times a comparison was made: "
                        + isCompare + "\nNumber of times a value was shifted: "
                        + isShift + "\nNumber of milliseconds to complete sort: "
                        + isTime + "\n\n";
        }
        
        //QUICKSORT
        if (rbnQuick.isSelected()){
            sortList = QuickS(numList4, order, 0, numList.length-1);
            
            String tempstringS = "";
            for (int i = 0; i <temp.size(); i++)
                tempstringS = tempstringS + sortList[i] + "\n";
            
            txaSort.setText(tempstringS);
            
            output = output + "Quick Sort\nNumber of times the loop was executed: " 
                        + qsLoop + "\nNumber of times a comparison was made: "
                        + qsCompare + "\nNumber of times a value was shifted: "
                        + qsShift + "\nNumber of milliseconds to complete sort: "
                        + qsTime + "\n\n";
        }
        //Uses quicksort by default
        
        txaOut.setText(output);
        
        ssLoop = 0; 
        ssCompare = 0;
        ssShift = 0;
        ssTime = 0;
        bsLoop = 0; 
        bsCompare = 0;
        bsShift = 0;
        bsTime = 0;
        isLoop = 0; 
        isCompare = 0;
        isShift = 0;
        isTime = 0;
        qsLoop = 0; 
        qsCompare = 0;
        qsShift = 0;
        qsTime = 0;
        //Resets count variables
    }//GEN-LAST:event_btnSortActionPerformed
    
    int ssLoop; 
    int ssCompare;
    int ssShift;
    long ssTime;
    
    int[] SelectionS (int A[], int b) {
        long start = System.currentTimeMillis();
        
        for (int i = 0; i <= A.length - 2; i++) {
            for (int j = i+1; j <= A.length - 1; j++) {
                ssLoop++;
                ssCompare++;
                
                if (b == 0){
                    if (A[i] < A[j]) {
                        //Swap the enteries
                        ssShift++;
                        int temp = A[i];
                        A[i] = A[j];
                        A[j] = temp;
                    }
                }
                else {
                    if (A[i] > A[j]) {
                        //Swap the enteries
                        ssShift++;
                        int temp = A[i];
                        A[i] = A[j];
                        A[j] = temp;
                    }
                }
                //Order variables determines whether output is
                // ascending or descending
            }
        }
        
        long end = System.currentTimeMillis();
        ssTime = end - start;
        //Time calculated 
        
        return A;
        //Returns the sorted array
    }
        
    int bsLoop; 
    int bsCompare;
    int bsShift;
    long bsTime;
    
    int [] BubbleS (int A[], int b) {
        long start = System.currentTimeMillis();
        //Starts timer
        
        int numItems = A.length;
        int bottom = numItems - 1;
        //boolean sw = true;
        int temp;
        
        for (int i = 0; i < numItems; i++) {
            for (int j = 0; j < bottom; j++) {
                bsLoop++;
                bsCompare++;
                
                if (b == 1) {
                    if (A[j] > A[j+1]) {
                        bsShift++;
                        temp = A[j];
                        A[j] = A[j+1];
                        A[j+1] = temp;
                    }
                }
                //Ascending order
                else if (b == 0) {
                    
                    if (A[j] < A[j+1]) {
                        bsShift++;
                        temp = A[j];
                        A[j] = A[j+1];
                        A[j+1] = temp;
                    }
                }
                //Descending order
            }
        }
        
        long end = System.currentTimeMillis();
        bsTime = end - start;
        //Time calculated
        
        return A;
    }
    
    /*
    int [] BubbleS2 (int A [], int b) {
        int numItems = A.length;
        boolean sw = true;
        int bottom = numItems - 1;
        //jb1.setText(String.valueOf(bottom));
        int temp;
        
        while (sw = true) {
            sw = false;
            for (int j = 0; j < bottom; j++) {
                //jb2.setText(String.valueOf(i));
                //jb3.setText(String.valueOf(bottom));

                if (A[j] > A[j+1]) {
                    sw = true;
                    temp = A[j];
                    A[j] = A[j+1];
                    A[j+1] = temp;
                }               
            }
            bottom--;
        }
        return A;
    }
    //For an unknown reason bubble sort did not work when using a while loop
    */
    
    int isLoop; 
    int isCompare;
    int isShift;
    long isTime;
    
    int [] InsertionS (int A[], int b) {
        long start = System.currentTimeMillis();
        //Starts timer
        
        int temp;
        
        for (int i = 1; i < A.length; i++) {
            isLoop++;
                        
            int j = i;
            if (b == 0) {
                    while ((j > 0)&&(A[j-1] < A[j])) {
                    isCompare++;
                    isShift++;
                        temp = A[j];
                    A[j] = A[j-1];
                    A[j-1] = temp;
                    j--;
                }
                isCompare++;
                //A final comparison is made without the contents of the while loop
                // running
            }
            else {
                while ((j > 0)&&(A[j-1] > A[j])) {
                    isCompare++;
                    isShift++;
                    temp = A[j];
                    A[j] = A[j-1];
                    A[j-1] = temp;
                    j--;
                }            
                isCompare++;
                //A final comparison is made without the contents of the while loop
                // running
            }
        }
        
        long end = System.currentTimeMillis();
        isTime = end - start;
        //Time calculated
        
        return A; 
    }
    
    int qsLoop; 
    int qsCompare;
    int qsShift;
    long qsTime;
        
    int [] QuickS(int A[], int b, int l, int r) {
        long start = System.currentTimeMillis();
        //Starts timer
        
        qsLoop++;
        
        int index = partition(A, b, l, r);
        if (l < index - 1)
            QuickS(A, b, l, index - 1);
        if (index < r)
            QuickS(A, b, index, r);
        
        long end = System.currentTimeMillis();
        qsTime = end - start;
        //Time calculated
        
        return A;
    }
    
    int partition(int A[], int b, int l, int r)
    {
        int i = l, j = r;
        
        int pivot = A[(l + r) / 2];
        //Sets the pivot point as the middle number so no final swap is required
        
        while (i <= j) {
            if (b == 1) {
                while (A[i] < pivot){
                    i++;
                    qsCompare++;
                }
                while (A[j] > pivot){
                    j--;
                    qsCompare++;
                }
                
                if (i <= j) {
                    qsCompare++;
                    qsShift++;  
                    int temp = A[i];
                    A[i] = A[j];
                    A[j] = temp;
                    //Swaps numbers
                    
                    i++;
                    j--;
                    //Shifts left and right boundaries
                }
                qsCompare+=3;
                //Three extra comparisons are made that return false
                // so no code is executed but the comparison still occurs
            }
            else {
                while (A[i] > pivot){
                    i++;
                    qsCompare++;
                }
                while (A[j] < pivot){
                    j--;
                    qsCompare++;
                }
                if (i <= j) {
                    qsCompare++;
                    qsShift++; 
                    int temp = A[i];
                    A[i] = A[j];
                    A[j] = temp;
                    //Swaps numbers
                    
                    i++;
                    j--;
                    //Shifts left and right boundaries
                }
                qsCompare+=3;
                //Three extra comparisons are made that return false
                // so no code is executed but the comparison still occurs
            }        
        }
        
        return i;
        //Returns the left boundary
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SortingEfficiencies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SortingEfficiencies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SortingEfficiencies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SortingEfficiencies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SortingEfficiencies().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSort;
    private javax.swing.ButtonGroup btngAlgorithm;
    private javax.swing.ButtonGroup btngNum;
    private javax.swing.ButtonGroup btngOrder;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAns;
    private javax.swing.JLabel lblOri;
    private javax.swing.JLabel lblSort;
    private javax.swing.JLabel lblSub;
    private javax.swing.JLabel lblSub1;
    private javax.swing.JLabel lblSub2;
    private javax.swing.JLabel lblSub4;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JRadioButton rbn10;
    private javax.swing.JRadioButton rbn100;
    private javax.swing.JRadioButton rbn1000;
    private javax.swing.JRadioButton rbn5000;
    private javax.swing.JRadioButton rbnAscending;
    private javax.swing.JRadioButton rbnBubble;
    private javax.swing.JRadioButton rbnCus;
    private javax.swing.JRadioButton rbnDescending;
    private javax.swing.JRadioButton rbnInsertion;
    private javax.swing.JRadioButton rbnQuick;
    private javax.swing.JRadioButton rbnSelect;
    private javax.swing.JTextField tfNum;
    private javax.swing.JTextArea txaOri;
    private javax.swing.JTextArea txaOut;
    private javax.swing.JTextArea txaSort;
    // End of variables declaration//GEN-END:variables
}
